
/*
**    Handled Flags:  1R -- aL -- ligp -- StuUcfr
**
**    Also handled is extended attributes & ACL.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —
**
**    | -- file mode -- | -- number of links -- | -- owner name -- | -- group name -- | -- number of bytes in the file -- | -- abbreviated month -- | -- day-of-month file was last modified -- | -- hour file last modified -- | -- minute file last modified -- | -- and the pathname.
**          drwx------               16                akharrou          2018_october                12288                            May                              20                                     16                                   :22                         .
**
**
**             $> drwx------  16 akharrou  2018_october    12288 May 20 16:22 .
**
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**    Allowed Functions:
**
**
**        ◦ stat       —>  gets info about a file                                /* NOTE : used */
**        ◦ lstat      —>  gets info about a file                                /* NOTE : used */
**
**        ◦ getpwuid   —>  gets info associated with a user id (uid)             /* NOTE : used */
**        ◦ getgrgid   —>  gets info associated with a group id (gid)            /* NOTE : used */
**
**        ◦ getxattr   —>  extended attributes                                   /* NOTE : used */
**        ◦ tcgetattr  —>  extended attributes
**        ◦ listxattr  —>  extended attributes                                   /* NOTE : used */
**
**        ◦ readlink                                                             /* NOTE : used */
**
**        ◦ time
**        ◦ ctime      —>  converts a time_t into a null-terminated string of the form "Wed Jun 30 21:49:08 1993\n"  /* NOTE : used */
**        ◦ gmtime     —>  converts the calendar time timep to broken-down time representation
**        ◦ strftime
**
**        ◦ opendir    /* NOTE : used */
**        ◦ readdir    /* NOTE : used */
**        ◦ closedir   /* NOTE : used */
**
**        ◦ write
**        ◦ malloc
**        ◦ free
**
**        ◦ strerror
**        ◦ perror
**        ◦ exit
**
**    Justified Use:
**
**        ◦ acl_get_link_np                                                      /* NOTE : used */
**        ◦ acl_get_entry                                                        /* NOTE : used */
**        ◦ acl_free                                                             /* NOTE : used */
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**  opendir:
**
**       NAME
**            opendir - open a directory
**
**       PROTOTYPE
**            DIR
**                   *opendir(const char *);
**
**       DESCRIPTION
**            The opendir() function opens a directory stream corresponding
**            to the directory named by the dirname argument. The directory
**            stream is positioned at the first entry. If the type DIR, is
**            implemented using a file descriptor, applications will only
**            be able to open up to a total of {OPEN_MAX} files and
**            directories. A successful call to any of the exec functions
**            will close any directory streams that are open in the calling
**            process.
**
**        RETURN VALUE
**             Upon successful completion, opendir() returns a pointer to an
**             object of type 'DIR'. Otherwise, a null pointer is returned and
**             errno is set to indicate the error.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**  readdir:
**
**       NAME
**            readdir - read (the entry) a directory
**
**       PROTOTYPE
**            struct dirent
**                   *readdir(DIR *dirp);
**
**       DESCRIPTION
**            The readdir() function returns a pointer to a structure
**            representing the directory entry at the current position
**            in the directory stream specified by the argument dirp,
**            and positions the directory stream at the next entry.
**
**            It returns a null pointer upon reaching the end of the directory
**            stream. The structure dirent defined by the <dirent.h> header
**            describes a directory entry.
**
**            If entries for dot or dot-dot exist, one entry will be returned
**            for dot and one entry will be returned for dot-dot; otherwise
**            they will not be returned.
**
**        RETURN VALUE
**             Upon successful completion, readdir() returns a pointer to an
**             object of type struct 'dirent'.
**
**             When an error is encountered, a null pointer is returned and
**             errno is set to indicate the error.
**
**             When the end of the directory is encountered, a null pointer
**             is returned and errno is not changed.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**  closedir:
**
**       NAME
**            closedir - close a directory
**
**       PROTOTYPE
**            int
**                   closedir(DIR *dirp);
**
**       DESCRIPTION
**            The closedir() function closes the directory stream referred
**            to by the argument 'dirp'. Upon return, the value of 'dirp'
**            may no longer point to an accessible object of the type DIR.
**            If a file descriptor is used to implement type DIR, that file
**            descriptor will be closed.
**
**        RETURN VALUE
**             Upon successful completion, closedir() returns 0. Otherwise,
**             -1 is returned and errno is set to indicate the error.
**
**        ERRORS
**             The closedir() function may fail if:
**
**               [EBADF]
**                    The dirp argument does not refer to an open directory
**                    stream.
**
**               [EINTR]
**                    The closedir() function was interrupted by a signal.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**       NAME
**            readlink, readlinkat -- read value of a symbolic link
**
**       SYNOPSIS
**            #include <unistd.h>
**
**            ssize_t
**            readlink( const char *restrict path,
**                      char *restrict buf,
**                      size_t bufsize              );
**
**       DESCRIPTION
**            readlink() places the contents of the symbolic link path in the
**            buffer buf, which has size bufsize.  Readlink does not append a
**            NUL character to buf.
**
**            The readlinkat() system call is equivalent to readlink() except
**            in the case where path specifies a relative path. In this case
**            the symbolic link whose content is read relative to the directory
**            associated with the file descriptor fd instead of the current
**            working directory. If readlinkat() is passed the special value
**            AT_FDCWD in the fd parameter, the current working directory is
**            used and the behavior is identical to a call to readlink().
**
**       RETURN VALUES
**            The call returns the count of characters placed in the buffer
**            if it succeeds, or a -1 if an error occurs, placing the error
**            code in the global variable errno.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  DIR -- directory descriptor
**
**             DECLARATION
**
**                  ==>> structure describing an open directory. <<==
**
**                  typedef struct
**                  {
**                       int                           __dd_fd;       // file descriptor associated with directory
**                       long                          __dd_loc;      // offset in current buffer
**                       long                          __dd_size;     // amount of data returned
**                       char                          *__dd_buf;     // data buffer
**                       int                           __dd_len;      // size of data buffer
**                       long                          __dd_seek;     // magic cookie returned
**                       __unused long                 __padding;     // (__dd_rewind space left for bincompat)
**                       int                           __dd_flags;    // flags for readdir
**                       __darwin_pthread_mutex_t      __dd_lock;     // for thread locking
**                       struct _telldir               *__dd_td;      // telldir position recording
**                  }
**                  DIR;
**
**             FUNCTION
**                  DIR *opendir(const char *filename);
**
**             DESCRIPTION
**                  Structure returned upon calling readdir().
**
**                  The type DIR, which is defined in the header <dirent.h>,
**                  represents a directory stream, which is an ordered sequence
**                  of all the directory entries in a particular directory.
**                  Directory entries represent files; files may be removed
**                  from a directory or added to a directory asynchronously
**                  to the operation of readdir().
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  struct dirent -- directory entry structure
**
**             DECLARATION
**
**                 ==>> structure describing a directory <<==
**
**                 #define __DARWIN_MAXNAMLEN   (255)
**                 #define __DARWIN_MAXPATHLEN  (1024)
**
**                 #define __DARWIN_STRUCT_DIRENTRY
**                 {
**                     __uint64_t    d_ino;           // file number of entry
**                     __uint64_t    d_seekoff;       // seek offset (optional, used by servers)
**                     __uint16_t    d_reclen;        // length of this record                      NOTE : MAYBE USEFUL
**                     __uint16_t    d_namlen;        // length of string in d_name                 NOTE : USEFUL
**                     __uint8_t     d_type;          // file type, see below                       NOTE : USEFUL
**                     char          d_name[1024];    // entry name (up to MAXPATHLEN bytes)        NOTE : USEFUL
**                 }
**
**                 struct dirent __DARWIN_STRUCT_DIRENTRY;
**
**             FUNCTION
**                  struct dirent *readdir(DIR *dirp);
**
**             DESCRIPTION
**                  Structure returned upon calling readdir().
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  struct stat -- directory information
**
**             DECLARATION
**
**                 ==>> structure describing information about a directory <<==
**
**             The buf argument is a pointer to a stat structure as defined by
**             <sys/stat.h> and into which information is placed concerning the
**             file. When the macro _DARWIN_FEATURE_64_BIT_INODE is not defined
**             (see below for more information about this macro), the stat structure
**             is defined as:
**
**             struct stat  /* when _DARWIN_FEATURE_64_BIT_INODE is NOT defined */
**             {
**                 dev_t    st_dev;                       /* device inode resides on */
**                 ino_t    st_ino;                       /* inode's number */
**                 mode_t   st_mode;                      /* inode protection mode */
**                 nlink_t  st_nlink;                     /* number of hard links to the file */
**                 uid_t    st_uid;                       /* user-id of owner */
**                 gid_t    st_gid;                       /* group-id of owner */
**                 dev_t    st_rdev;                      /* device type, for special file inode */
**                 struct timespec st_atimespec;          /* time of last access */
**                 struct timespec st_mtimespec;          /* time of last data modification */
**                 struct timespec st_ctimespec;          /* time of last file status change */
**                 off_t    st_size;                      /* file size, in bytes */
**                 quad_t   st_blocks;                    /* blocks allocated for file */
**                 u_long   st_blksize;                   /* optimal file sys I/O ops blocksize */
**                 u_long   st_flags;                     /* user defined flags for file */
**                 u_long   st_gen;                       /* file generation number */
**             };
**
**             NOTE: However, when the macro _DARWIN_FEATURE_64_BIT_INODE is defined,
**             the stat structure will now be defined as:
**
**             struct stat  /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
**             {
**                 dev_t             st_dev;              /* ID of device containing file */
**                 mode_t            st_mode;             /* Mode of file (see below) */
**                 nlink_t           st_nlink;            /* Number of hard links */
**                 ino_t             st_ino;              /* File serial number */
**                 uid_t             st_uid;              /* User ID of the file */
**                 gid_t             st_gid;              /* Group ID of the file */
**                 dev_t             st_rdev;             /* Device ID */
**                 struct timespec   st_atimespec;        /* time of last access */
**                 struct timespec   st_mtimespec;        /* time of last data modification */
**                 struct timespec   st_ctimespec;        /* time of last status change */
**                 struct timespec   st_birthtimespec;    /* time of file creation(birth) */
**                 off_t             st_size;             /* file size, in bytes */
**                 blkcnt_t          st_blocks;           /* blocks allocated for file */
**                 blksize_t         st_blksize;          /* optimal blocksize for I/O */
**                 uint32_t          st_flags;            /* user defined flags for file */
**                 uint32_t          st_gen;              /* file generation number */
**                 int32_t           st_lspare;           /* RESERVED: DO NOT USE! */
**                 int64_t           st_qspare[2];        /* RESERVED: DO NOT USE! */
**             };
**
**            FUNCTION
**                  int stat(const char *path, struct stat *buf);
**
**             DESCRIPTION
**                  Structure returned upon calling stat().
**
**                  lstat() is identical to stat(), except that if path is
**                  a symbolic link, then the link itself is stat-ed, not
**                  the file that it refers to.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**        Understanding how to deconstruct & use 'mode_t':
**
**        https://jameshfisher.com/2017/02/24/what-is-mode_t/
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**        Understanding how to get ACL and Extended Attributes:
**
**        https://stackoverflow.com/questions/36229265/how-to-get-extended-attributes-of-a-fileunix-c
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  struct passwd -- uid information
**
**             DECLARATION
**
**                 ==>> structure describing information associated to a user id <<==
**
**                   The passwd structure is defined in <pwd.h> as follows:
**
**                   struct passwd {
**                       char   *pw_name;       /* username */             NOTE : USEFUL
**                       char   *pw_passwd;     /* user password */
**                       uid_t   pw_uid;        /* user ID */
**                       gid_t   pw_gid;        /* group ID */
**                       char   *pw_gecos;      /* user information */
**                       char   *pw_dir;        /* home directory */
**                       char   *pw_shell;      /* shell program */
**                   };
**
**             FUNCTION
**                  struct passwd *getpwuid(uid_t uid);
**
**             DESCRIPTION
**                  Structure returned upon calling getpwuid().
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  struct group -- gid information
**
**             DECLARATION
**
**                 ==>> structure describing information associated to a group id <<==
**
**                   The group structure is defined in <grp.h> as follows:
**
**                   struct group {
**                       char   *gr_name;       /* group name */            NOTE : USEFUL
**                       char   *gr_passwd;     /* group password */
**                       gid_t   gr_gid;        /* group ID */
**                       char  **gr_mem;        /* group members */
**                   };
**
**             FUNCTION
**                  struct group *getgrgid(gid_t gid);
**
**             DESCRIPTION
**                  Structure returned upon calling getgrgid().
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**             NAME
**                  struct tm -- broken down time information
**
**             DECLARATION
**
**                 ==>> structure describing time <<==
**
**                   Broken-down time is stored in the structure tm which is defined in <time.h> as follows:
**
**                   struct tm {
**                       int tm_sec;         /* seconds */
**                       int tm_min;         /* minutes */
**                       int tm_hour;        /* hours */
**                       int tm_mday;        /* day of the month */
**                       int tm_mon;         /* month */
**                       int tm_year;        /* year */
**                       int tm_wday;        /* day of the week */
**                       int tm_yday;        /* day in the year */
**                       int tm_isdst;       /* daylight saving time */
**                   };
**
**             FUNCTION
**                  struct tm *gmtime(const time_t *timep);
**
**             DESCRIPTION
**                  A pointer to the structure returned upon calling gmtime().
**
**                  The members of the tm structure are:
**
**                   tm_sec
**                       The number of seconds after the minute, normally in
**                       the range 0 to 59, but can be up to 60 to allow for
**                       leap seconds.
**
**                   tm_min
**                       The number of minutes after the hour, in the range 0
**                       to 59.
**
**                   tm_hour
**                       The number of hours past midnight, in the range 0 to
**                       23.
**
**                   tm_mday
**                       The day of the month, in the range 1 to 31.
**
**                   tm_mon
**                       The number of months since January, in the range 0 to
**                       11.
**
**                   tm_year
**                       The number of years since 1900.
**
**                   tm_wday
**                       The number of days since Sunday, in the range 0 to 6.
**
**                   tm_yday
**                       The number of days since January 1, in the range 0 to
**                       365.
**
**                   tm_isdst
**                       A flag that indicates whether daylight saving time is
**                       in effect at the time described. The value is positive
**                       if daylight saving time is in effect, zero if it is not,
**                       and negative if the information is not available.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**       NAME
**            strftime -- format date and time  NOTE : USEFUL
**
**       SYNOPSIS
**            #include <time.h>
**
**            size_t
**            strftime(char *restrict s, size_t maxsize,
**                     const char *restrict format,
**                     const struct tm *restrict timeptr);
**
**       DESCRIPTION
**            The strftime() function formats the broken-down time tm
**            according to the format specification format and places
**            the result in the character array s of size max.
**
**            The format specification is a null-terminated string and
**            may contain special character sequences called conversion
**            specifications, each of which is introduced by a '%' character
**            and terminated by some other character known as a conversion
**            specifier character. All other character sequences are ordinary
**            character sequences.
**
**       RETURN VALUES
**            The strftime() function returns the number of bytes placed in
**            the array s, not including the terminating null byte, provided
**            the string, including the terminating null byte, fits. Otherwise,
**            it returns 0, and the contents of the array is undefined.
**
** — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — #
**
**    The <sys/types.h> header includes definitions for at least the following types:
**
**          blkcnt_t
**               Used for file block counts
**
**          blksize_t
**               Used for block sizes
**
**          clock_t
**               Used for system times in clock ticks or CLOCKS_PER_SEC (see <time.h>).
**
**          clockid_t
**               Used for clock ID type in the clock and timer functions.
**
**          dev_t
**               Used for device IDs.
**
**          fsblkcnt_t
**               Used for file system block counts
**
**          fsfilcnt_t
**               Used for file system file counts
**
**          gid_t
**               Used for group IDs.
**
**          id_t
**               Used as a general identifier; can be used to contain at least a pid_t, uid_t or a gid_t.
**
**          ino_t
**               Used for file serial numbers.
**
**          key_t
**               Used for interprocess communication.
**
**          mode_t
**               Used for some file attributes.
**
**          nlink_t
**               Used for link counts.
**
**          off_t
**               Used for file sizes.
**
**          pid_t
**               Used for process IDs and process group IDs.
**
**          pthread_attr_t
**               Used to identify a thread attribute object.
**
**          pthread_cond_t
**               Used for condition variables.
**
**          pthread_condattr_t
**               Used to identify a condition attribute object.
**
**          pthread_key_t
**               Used for thread-specific data keys.
**
**          pthread_mutex_t
**               Used for mutexes.
**
**          pthread_mutexattr_t
**               Used to identify a mutex attribute object.
**
**          pthread_once_t
**               Used for dynamic package initialisation.
**
**          pthread_rwlock_t
**               Used for read-write locks.
**
**          pthread_rwlockattr_t
**               Used for read-write lock attributes.
**
**          pthread_t
**               Used to identify a thread.
**
**          size_t
**               Used for sizes of objects.
**
**          ssize_t
**               Used for a count of bytes or an error indication.
**
**          suseconds_t
**               Used for time in microseconds
**
**          time_t
**               Used for time in seconds.
**
**          timer_t
**               Used for timer ID returned by timer_create().
**
**          uid_t
**               Used for user IDs.
**
**          useconds_t
**               Used for time in microseconds.
*/
